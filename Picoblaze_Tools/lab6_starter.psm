; Author:	K. Newlander, Josh Eaton
; LAB6  Design 
;	Performs Addition, Subtraction, Left Shift, and Multiplication
;   on a global value, based on states of Nexys dev board slider switches
;   in accordance with the lab 6 assignment
;	Operation triggered by BTNR, reset on BTND, value displayed on 7-segment

; Extra ASM to fix issue with Vivado (see documentation), Skips Address 03
	JUMP cold_start
	JUMP cold_start
	JUMP cold_start
	JUMP cold_start
; Cold Start
cold_start:

; SLIDERS are assigned to PORT 02
; PUSHBTNs are assigned to PORT 03
; PUSHBTN(0) is used to add 1
; PUSHBTN(1) is used to subtract 1
; PUSHBTN(3) is used to reset design

; NOTE: (s# usage):
; s0,s1,s2 - Used in delay subroutines
; s3,s4	-	Stores global register for value to display
; s5	-	Stores the debounced push btn signal
; s6	-	Debounced register
; s7 	-   Slider operator/operand
; s8	-	debug LEDs
; s9    -   intermediate multiply products
; sA

	reset: 	LOAD s3,  00								;reset running result to 0
			LOAD s4,  00	
			LOAD s8,  00							
			OUTPUT s3,  04							;display reset values
			OUTPUT s4,  05
			OUTPUT s8,  06
			LOAD s5,  00								;zero out stored pushbutton values
			LOAD s6,  00

			;; wait for btnd to be depressed to exit reset state
			INPUT s5,  03
			TEST s5,  08
			JUMP NZ, reset	;stay in reset until 'depressed'
		
	; Main Processing Loop
	; Runs debouncer on input push btns
	; Checks current state of push btns to perform operation or reset
	mainlp:	INPUT s5,  03	; store push buttons
			CALL del10ms	; delay 10ms
			INPUT s6,  03	; store push buttons again
			AND s5, s6		; AND push buttons to only keep signals high if held for 10ms
			
			; Determine if Btn0 was pressed
			TEST s5,  01
			JUMP NZ, calc	; Start Calculator
			
			; Determine if Btn3 was pressed
			TEST s5,  08
			JUMP NZ, reset	; Reset

			; Update Displays
			OUTPUT s3,  04	; Update Display with ALU REG
			OUTPUT s4,  05
			OUTPUT s8,  06	; Update LEDs with last op performed

			JUMP mainlp
	


	; Calculator "operate" loop
	; s7 holds slider states
	; Evaluate slider state (7-4) to determine operation
	; Evaluate slider state (3-0) to determine operand
	; jump to operator subroutine 
	calc: INPUT s7,  02 ; grab slider state
		  ; MSB 4-bits are operator

		  ; add if sw4
		  TEST s7,  10
		  JUMP NZ, addop

		  ; sub if sw5
		  TEST s7,  20
		  JUMP NZ, subop
	      
		  ; shift left if sw6
		  TEST s7,  40
		  JUMP NZ, slop

		  ; multiply if sw7
		  TEST s7,  80
		  JUMP NZ, multop

		  LOAD s8,  00 ; no LEDs because nothing happened
		  RETURN

	; return here for 1 operation per press	  
	calcend: RETURN


	;	ADD OPERATION
	;	Handles Carry
	addop:	AND s7,  0F ; mask operator bits
			ADD s3, s7 ; ADD sw value to register
			ADDCY s4, 00 ; ADD carry to MSB register
			LOAD s8, 01 ; LED to highlight add operation
			JUMP wait

	
	;	SUBTRACT OPERATION
	;	Basic Subtract
	subop:	AND s7,  0F ; mask operator bits
			SUB s3, s7	 ; subtract sw value from S3
			SUBCY s4, 00 ; subtract carry
			LOAD s8, 02  ; LED to signify subtract
			JUMP wait
	
	
	; Shift Left operation
	slop : AND s7,  0F ; mask operator bits

	sl_loop:  SL0 s3	        ; shift lower bits by 1
		   	  SLA s4	        ; shift in s3 msb, shift upper bits by 1
		      SUB s7, 01 		; decrement shift count
		      COMPARE s7, 00
		      JUMP NZ, sl_loop    ; loop until shift count is zero

		   LOAD s8, 04		; LED to signify Shift left
		   JUMP wait


	; Multiply Operation
	; Shift and add to achieve multiplication
	; A <= B*Q
	multop: AND s7,  0F ; mask operator bits
			LOAD s9, 00
			LOAD sA, 00

	mult_loop:	TEST s7, 01 ; check first bit of operand
			    SR0 s7		; shift operand
			    JUMP Z, skip 
			    ADD s9, s3
			    ADDCY sA, s4 
		skip:	COMPARE s7, 00
				JUMP NZ,
				mult_loop ; keep multiplying while there's bits left
			
			LOAD s4, sA ; load in result to global
			LOAD s3, s9
			LOAD s8, 08 ; LED to signify multiply
			JUMP wait

	wait:	INPUT s5, 03
		TEST s5, 01			;check btnr and only exit this function if button isn't pressed
		JUMP NZ, wait	;stay in this routine until btn is depressed
		JUMP Z, mainlp
	
	




	;;HELPER FUNCTIONS FROM TESTPROG (used for delay in top level, added a 10ms delay)
	delms:	INPUT s0,07
	delmslp:	INPUT s1,07
			COMPARE s0,s1
			JUMP Z, delmslp
			RETURN
			
	del10ms:	LOAD s2, F5	;load 245
	del10mslp:	CALL delms
				ADD s2, 01
				JUMP NZ, del10mslp
				RETURN

	del250ms:	LOAD s2, 05
	del250mslp: CALL delms
			ADD s2, 01
			JUMP NZ, del250mslp
			RETURN
				
						
						                  